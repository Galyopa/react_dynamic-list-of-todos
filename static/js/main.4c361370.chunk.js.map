{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onButtonClick","useState","query","setQuery","appliedQuery","setAppliedQuery","status","setStatus","applyQuery","useCallback","debounce","visibleTodos","useMemo","lowerQuery","toLowerCase","filter","todo","title","includes","String","completed","className","type","name","value","onChange","event","target","id","map","classNames","checked","readOnly","onClick","userId","request","url","a","fetch","response","json","CurrentUser","user","setUser","useEffect","getUser","then","email","phone","App","selectedUserId","setSelectedUserId","setTodos","handleOnClickButton","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c361370.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { debounce } from 'lodash';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  onButtonClick: (userId: number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, onButtonClick }) => {\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [status, setStatus] = useState('');\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const visibleTodos = useMemo(() => {\n    const lowerQuery = appliedQuery.toLowerCase();\n\n    return todos.filter(\n      todo => todo.title.toLowerCase().includes(lowerQuery)\n      && (\n        status\n          ? String(todo.completed) === status\n          : true\n      ),\n    );\n  }, [todos, appliedQuery, status]);\n\n  return (\n    <div className=\"TodoList\">\n      <label>\n        Filter by title\n        <input\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          onChange={event => {\n            setQuery(event.target.value);\n            applyQuery(event.target.value);\n          }}\n        />\n      </label>\n\n      <select\n        name=\"status\"\n        id=\"status\"\n        value={status}\n        onChange={event => setStatus(event.target.value)}\n      >\n        <option value=\"\">All tasks</option>\n        <option value=\"true\">Completed</option>\n        <option value=\"false\">Active</option>\n      </select>\n\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              className={\n                classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )\n              }\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => onButtonClick(todo.userId)}\n              >\n                {`User#${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api/';\n\nconst request = async (url: string) => {\n  const response = await fetch(`${API_URL}${url}`);\n\n  return response.json();\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUser = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  onButtonClick: (userId: number) => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, onButtonClick }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId).then(response => setUser(response));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n      <button\n        type=\"button\"\n        onClick={() => onButtonClick(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const handleOnClickButton = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  useEffect(() => {\n    getTodos().then(response => setTodos(response));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList todos={todos} onButtonClick={handleOnClickButton} />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onButtonClick={handleOnClickButton}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}